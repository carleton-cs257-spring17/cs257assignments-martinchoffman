{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww13620\viewh10500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Partners: Martin Hoffman and Chris Tordi\
\
Description:\
\
We will be creating a tower defense game. The goal of the game is to stop enemy units from reaching your base. Enemies spawn on one side of the map and follow a path towards your base. You can stop enemies by buying and placing towers along the path. Some towers will shoot enemies, and others will heal other towers. If an enemy reaches your base then your base loses health. Once your base loses all its health the games is over. Enemies will spawn in waves with each wave increasing in difficulty. \
\
MVC: Our game design best mirrors the MVC pattern. \
\
Model: Our model component will store our data needed to run the game. This includes map information, enemy health, tower health, base health,  list of number of towers on map, money, wave number, list of bullets, list of enemies. This data is then used to display the view. \
\
View: Our game will have at least 3 different views. A home screen, the main game view, and a pop up menu screen that appear when a button on the main game view is pressed. The home screen will offer the user some clickable options including start new game, load game. The main view will be where all the game action takes place. It will show the enemies moving along the path as well as user placed towers along the path. It will also show money, base health, and wave number. The information needed for this view comes from the model.  The in game pop-up menu will offer options like: start new game and save game. \
\
Controller: The controller will be maintaining all of the operations of our game. The controller will be responsible for progression of the game. It will control all buttons, the changing of base health, as well as enemy health, user money, as well as the algorithm that uses wave number to increase the wave difficulty, whether that involves increases the time of the wave, the number or type of enemies, or increasing enemy health. \
\
\
\
Classes:\
\
Enemy_Interface.java\
Tower_Interface.java\
Map.java\
Targeting.java\
Waypoint.java\
Tower.java\
Finding_Enemy.java\
Enemy.java\
Shot.java\
Base.java\
Controller.java\
\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
}